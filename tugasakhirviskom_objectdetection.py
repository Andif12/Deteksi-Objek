# -*- coding: utf-8 -*-
"""TugasAkhirViskom_ObjectDetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FoH6DW8c3AjIn-xykat1-_BPEe0Vmj2n
"""

!pip install ultralytics

!pip install -U ipywidgets

import ultralytics
ultralytics.checks()

from ultralytics import YOLO
from IPython.display import display, Image

import os
import pandas as pd
import numpy as np
import cv2
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from glob import glob

from PIL import Image


import warnings
warnings.filterwarnings("ignore", "use_inf_as_na option is deprecated")

from google.colab import drive
drive.mount('/content/drive')

# Tentukan path ke folder "Car Detection" di Google Drive
drive_path = "/content/drive/My Drive/Car Detection"

# Pastikan folder "Car Detection" ada, jika tidak maka buat
os.makedirs(drive_path, exist_ok=True)
print(f"Google Drive is mounted, and files will be saved to: {drive_path}")

import os
from PIL import Image

# Path ke folder gambar
train_images_path = "/content/drive/My Drive/Car Detection/training_images"

# List beberapa gambar
image_files = os.listdir(train_images_path)[:5]

# Tampilkan salah satu gambar
image_path = os.path.join(train_images_path, image_files[0])
image = Image.open(image_path)
image.show()

gdrive_dir = "/content/drive/My Drive/Car Detection"

# Buat struktur direktori
os.makedirs(f"{gdrive_dir}/images/train", exist_ok=True)
os.makedirs(f"{gdrive_dir}/images/val", exist_ok=True)
os.makedirs(f"{gdrive_dir}/labels/train", exist_ok=True)
os.makedirs(f"{gdrive_dir}/labels/val", exist_ok=True)

print(f"Struktur direktori berhasil dibuat di: {gdrive_dir}")

# Define paths
root_dir = "/content/drive/MyDrive/Car Detection"
labels_dir = "/content/drive/MyDrive/Car Detection/labels"
images_dir = "/content/drive/MyDrive/Car Detection/images"
train_data = "/content/drive/MyDrive/Car Detection/training_images"
csv_data = "/content/drive/MyDrive/Car Detection/train_solution_bounding_boxes.csv"
test_data = "/content/drive/MyDrive/Car Detection/testing_images"

# Loading the CSV data
df = pd.read_csv(csv_data)

# Display the first few rows of the dataframe to understand its structure
df.head()

print(df.info())

# Visualizing sample images with bounding boxes
def plot_images_with_boxes(image_path, df, n=5):
    images = glob(f'{image_path}/*.jpg')[:n]
    for img_path in images:
        img = cv2.imread(img_path)
        img_name = os.path.basename(img_path)
        boxes = df[df['image'] == img_name]

        for _, box in boxes.iterrows():
            cv2.rectangle(img,
                          (int(box['xmin']), int(box['ymin'])),
                          (int(box['xmax']), int(box['ymax'])),
                          (0, 255, 0), 2)

        plt.figure(figsize=(8, 8))
        plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
        plt.title(img_name)
        plt.axis('off')
        plt.show()

# Plotting sample images with bounding boxes
plot_images_with_boxes(train_data, df)

"""# Preparing the Dataset for YOLO"""

# Prepare YOLO format annotations
def create_yolo_annotation(row, img_width, img_height):
    x_center = ((row['xmin'] + row['xmax']) / 2) / img_width
    y_center = ((row['ymin'] + row['ymax']) / 2) / img_height
    width = (row['xmax'] - row['xmin']) / img_width
    height = (row['ymax'] - row['ymin']) / img_height
    return f"0 {x_center} {y_center} {width} {height}"

# Create YOLO annotations and copy images
for img_name in df['image'].unique():
    img_df = df[df['image'] == img_name]
    img_path = os.path.join(train_data, img_name)
    img = cv2.imread(img_path)
    if img is not None:
        img_height, img_width = img.shape[:2]

        # Decide whether to put in train or val folder
        if np.random.rand() < 0.8:  # 80% train, 20% val
            subset = "train"
        else:
            subset = "val"

        # Copy image
        dst_img_path = os.path.join(images_dir, subset, img_name)
        cv2.imwrite(dst_img_path, img)

        # Create annotation file
        annotation_path = os.path.join(labels_dir, subset, f"{img_name.split('.')[0]}.txt")
        with open(annotation_path, 'w') as f:
            for _, row in img_df.iterrows():
                yolo_annotation = create_yolo_annotation(row, img_width, img_height)
                f.write(yolo_annotation + '\n')

# Create YAML configuration file
yaml_content = f"""
path: {root_dir}
train: images/train
val: images/val

nc: 1
names: ['car']
"""

with open('car_detection.yaml', 'w') as f:
    f.write(yaml_content)

print("YAML configuration file created.")

# salin ke Google Drive
!cp /content/car_detection.yaml /content/drive/MyDrive/Car Detection

!yolo task=detect mode=train data=/content/car_detection.yaml model=yolo11n.pt epochs=100 imgsz=640

!yolo task=detect mode=val data=/content/car_detection.yaml model=/content/runs/detect/train/weights/best.pt

Image("/content/runs/detect/train/P_curve.png", width=600)

Image("/content/runs/detect/train/R_curve.png", width=600)

Image("/content/runs/detect/train/confusion_matrix.png", width=600)

Image("/content/runs/detect/train/confusion_matrix_normalized.png", width=600)

Image("/content/runs/detect/train/labels.jpg", width=600)

Image("/content/runs/detect/train/results.png", width=600)

"""___"""

Image("/content/runs/detect/train/train_batch0.jpg", width=600)

Image("/content/runs/detect/train/val_batch0_pred.jpg", width=600)

!yolo task=detect mode=predict model="/content/runs/detect/train/weights/best.pt" conf=0.40 source="/content/drive/MyDrive/Car Detection/images/val" save=True

from genericpath import getmtime
import glob
import os
from IPython.display import Image as IpyImage
from IPython.display import display

last_folder = max(glob.glob("/content/runs/detect/predict*/"), key=os.path.getmtime)

for img in glob.glob(last_folder + "*.jpg")[1:4]:  # [1:4] untuk gambar ke-2, ke-3, dan ke-4
    display(IpyImage(filename=img, width=600))
    print("\n")